//npx prisma migrate dev --name ""

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Session {
  token  String   @id
  expiry DateTime
  races   Race[]
  @@map(name:"sessions")
}

model Admin {
  id   Int  @id
  user User @relation(fields: [id], references: [id])
  @@map(name: "admins")
}

model User {
  id           Int       @default(autoincrement()) @id
  username     String    @unique
  password     String
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  loginToken   String?   @unique @map(name: "login_token")
  loginExpiry  DateTime? @map(name: "login_expiry")
  races        Race[]
  admin        Admin?
  @@map(name: "users")
}

model LanguageScript {
  id             Int         @default(autoincrement()) @id
  languageScript String      @unique @map(name: "language_script")
  paragraphs     Paragraph[]
  @@map(name: "language_scripts")
}

model Paragraph {
  id                  Int            @default(autoincrement()) @id
  text                String
  source              String?
  author              String?
  languageScript      LanguageScript @relation(fields: [languageScriptId], references: [id]) 
  languageScriptId    Int            @map(name: "language_script_id")
  selectable          Boolean        @default(true)
  races               Race[]
  @@map(name: "paragraphs")
}

model Race {
  id             String    @default(cuid()) @id
  startTime      DateTime  @map(name: "start_time")
  endTime        DateTime? @map(name: "end_time")
  mistakes       Int?
  paragraph      Paragraph @relation(fields: [paragraphId], references: [id], onDelete: Cascade)
  paragraphId    Int       @map(name: "paragraph_id")
  session        Session?  @relation(fields: [sessionToken], references: [token])
  sessionToken   String?   @map(name: "session_token")
  user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int?      @map(name: "user_id")
  @@map(name: "races")
}

model Newspost {
  id       Int      @default(autoincrement()) @id
  title    String 
  author   String
  postDate DateTime @map(name: "post_date") 
  body     String
  tags     String[]
  @@map(name: "newsposts")
}